package view;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.Timer;
import java.util.TimerTask;
import md2parsertest.MD2Obj;

/**
 *
 * @author leonardo
 */
public class View extends javax.swing.JFrame {

    private MD2Obj md2Obj;
    private Polygon polygon = new Polygon();
    private BufferedImage backBuffer;
    private Keyboard keyboard = new Keyboard();
    
    private double direction = 0;
    private double dx = 0;
    private double dz = 0;
    
    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        backBuffer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        try {
            //md2Obj = new MD2Obj("/res/poss_body.md2", 5);
            md2Obj = new MD2Obj("/res/demon-body.md2", 6);
            //md2Obj = new MD2Obj("/res/Samourai.md2", 4);
            //md2Obj = new MD2Obj("/res/Droid.md2", 6);
            //md2Obj = new MD2Obj("/res/teste_gangnan_anim.md2", 0.05);
            //md2Obj = new MD2Obj("/res/pessoa.md2", 0.05);
            
            for (String animationName : md2Obj.getAnimationNames()) {
                System.out.println(animationName);
            }
            
            //md2Obj.setAnimation("idle");
        } catch (Exception e) {
            System.exit(-1);
        }
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                update();
                repaint();
            }
        }, 100, 12);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 641, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 684, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new View().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private boolean biting = false;
    private boolean walking = false;
    private double frameRate = 0.15;
    
    public void update() {
        if (keyboard.isDown(37)) {
            direction-=0.02;
        }
        else if (keyboard.isDown(39)) {
            direction+=0.02;
        }
        
        if (walking) {
            dx += 5 * Math.sin(direction);
            dz += 5 * Math.cos(direction);
        }
        
        if (keyboard.isDown(65)) {
            biting = false;
            md2Obj.setAnimation("idle");
            frameRate=0.001;
        }
        
        if (keyboard.isDown(66) && !biting) {
            biting = true;
            md2Obj.setAnimation("die");
            frameRate=0.25;
        }
        
        if (biting) {
            if (md2Obj.getCurrentFrame() == md2Obj.getEndFrame()) {
                //md2Obj.setAnimation("idle");
                //frameRate = 0.01;
                //biting = false;
            }
            else {
                md2Obj.nextFrame(frameRate);
            }
            return;
        }
        
        
        if (keyboard.isDown(38) && !walking) {
            md2Obj.setAnimation("run");
            frameRate = 0.12;
            walking = true;
        }
        else if (keyboard.isUp(38) && walking) {
            md2Obj.setAnimation("idle");
            frameRate = 0.01;
            walking = false;
        }
        md2Obj.nextFrame(frameRate);
        //md2Obj.nextFrame();
    }

    @Override
    public void paint(Graphics g) {
        draw(backBuffer.getGraphics());
        g.drawImage(backBuffer, 0, 0, null);
    }
    
    public void draw(Graphics g) {
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, getWidth(), getHeight());
        g.translate(getWidth() / 2, getHeight() / 2);
        ((Graphics2D) g).scale(1, -1);
        g.setColor(Color.BLACK);
        for (int t = 0; t < md2Obj.getTriangles().length; t++) {
            polygon.reset();
            for (int p=0; p<3; p++) {
                double[] tv = md2Obj.getTriangleVertex(t, p);
                Vec4.rotateZ(direction, tv);
                int x = (int) ((400 * (tv[0] + dz)) / -((tv[1] + dx) - 600));
                int y = (int) ((400 * tv[2]) / -((tv[1] + dx) - 600));
                polygon.addPoint(x, y);
            }
            g.drawPolygon(polygon);
        }
    }
    
    
    

    @Override
    protected void processKeyEvent(KeyEvent ke) {
        if (keyboard == null) {
            return;
        }
        if (ke.getID() == KeyEvent.KEY_PRESSED) {
            keyboard.set(ke.getKeyCode(), true);
        }
        if (ke.getID() == KeyEvent.KEY_RELEASED) {
            keyboard.set(ke.getKeyCode(), false);
        }
    }
    
}
